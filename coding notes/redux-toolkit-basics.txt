Redux toolkit:

$npm install @reduxjs/toolkit
------------------------------

Replacing createStore() with configureStore()

//create file store.js in src dir:
import { configureStore } from '@reduxjs/toolkit'
//import each reducer

const store = configureStore({
  reducer: {
    notes: noteReducer,
    filter: filterReducer
  }
})

export default store //import to index.js for <Provider store={store}>
                     // to wrap <App /> inside

^combineReducers() is no longer used.

configureStore has many benefits (easier integration of dev tools
and libraries w/o additional configuration)
-------------------------------------------
Reducers using redux toolkit:

The #createSlice function is used for creating the reducer and
related action creators. 

^ex:

//in reducer file

import { createSlice } from '@reduxjs/toolkit'

const initialState = //...

const noteSlice = createSlice({
  name: 'notes',
  initialState,
  reducers: {
   createNote(state, action) {
     const content = action.payload
     state.push({
       content,
       important: false,
       id: gerenateId(),
     })
   },
 //other action handlers

^the #name field of the slice defines the prefix that is used
in the action's type values. IE: the createNote action will have a 
type value of notes/createNote (if noteSlice.name was foo, it would be
foo/createNote)

^The reducers parameter takes the reducer itself as an object, functions
inside the object handle the state changes caused by actions.

^action.payload in the handler functions contains the argument
provided by calling the action create.
ex: dispatch(createNote('foo!')) <- 'foo!' is the payload,
and type is 'notes/createNote'

^Important: state can be mutated inside the reducer using redux toolkit,
but don't have to.

^the reducer can be accessed through noteSlice.reducer, and the action
creators through noteSlice.actions. 

^export the noteSlice by:

export const { createNote, toggleImportanceOf } = noteSlice.actions
export default noteSlice.reducer


example of reducer action called in a component:

import { actionFunctionFoo } from '../reducers/fooReducer'

const ComponentName = (props) => {
 props.actionFunctionFoo(bar)
 return(
 //...
 )
}

--------------------------------------------------------

Redux devtools:

Chrome addon to help redux dev. Can inspect redux store state/actions
thru console. Works seamlessly with configureStore so no further config
is needed.
 
