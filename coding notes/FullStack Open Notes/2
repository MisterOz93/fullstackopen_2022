------random notes:----

when debugging w console.log, don't use( 'foo is' + foo) like in Java. instead:

console.log('props value is', props)

Functional programming, functions can be assigned to variables. 
ex: onlyEvens = array.filter(n) => n % 2 === 0


A 'higher order function' is a function that accepts a function as a 
parameter and/or returns a function. 

A 'callback function' is a function that's passed as an argument to a
higher order function, can then be invoked inside that function. 


------filter-------

Ex: arrayName.filter(function(element))
^filter loops through each element in array then passes each into the 
callback function, which returns true or false for each based on specified
criteria. 

note: array.find works like filter, but returns only the first instance. 


----------map-------

arrayName.map(function(element))

^map expects callback function to return transformed object to return in 
place of each element. 

arrow function ex: arrayName.map( (element) => element * 2)

---------reduce--------

can be used for any list transformation.

arrayName.reduce(function(tally, element){  }, startingPoint) 


tally starts as startingPoint, then the return value of each iteration is 
added to tally. 

example:

course.parts.reduce(function (sum, part){return sum + part.exercises}, 0)

^course.parts being an array of objects with an exercises field int value.

any variable assigned to that will equal the sum of exercises in course.parts



----------------rendering collections--------

Instead of hardcoding each element of an array in the app's return statement
({notes[0]} {notes[1]} etc.) return an iterator function instead (ex: map).

^Each element in an array/iterator MUST HAVE A UNIQUE "key" PROP

ex: <div>  
	{notes.map(note => <li key={note.id}> {note.content} </li>)}
</div>

given notes as an array of objects with id and content fields, map returns
a new array displaying the content, with the id value as the key prop. 

DO NOT USE ARRAY INDEX AS THE KEY VALUE, it will break things if elements
are added/removed. 

-------modules-------

common practice is to declare each component in their own js file as an 
ES6 modulevin a directory called components. components is placed in the src directory.

at the end of the Foo.js file, after defining the component, include:

export default Foo

then in App, at the start:  import Foo from './components/Foo'

^ the period refers to current directory. note the .js after Foo is ommitted.

----------------- Forms -----------------

<form> takes an onSubmit attribute. can create an event handler function

the example event handler uses (event) as a parameter, which is the event
that triggers the call to the function. 

First thing in the example is event.preventDefault(), which prevents the 
default action of submitting a form (which causes page to reload and other
stuff?)


 ***Accessing data contained in form's input element:***

Add a new piece of state for storing user submitted input, and set the
first element of the array as the value attribute of the input element.

^^this makes the input value immutable, to allow it to be
edited, create an event handler for input's onChange attribute. 

^ex:
 const [newNote setNewNote] = useState('new note')
...
inside <form>
...
<input value={newNote} onChange={handleNoteChange} />

^where hanldeNoteChange is an event handler function defined in the component.
The event handler is called every time a change occurs in the input element. 


so event.target.value inside handleNoteChage function 
(event being the parameter) refers to
the input value of that element, state being updated as the user 
inputs more. 

the event handler should setNewNote(event.target.value) inside

    *** Filtering Displayed Elements: ***

can create a boolean state of displayAll/setDisplayAll

then a const foo thats = to a ternary if/else. if displayAll true, return 
array, else return a filtered array.  

then in app's return field, return foo.map to iterate over the elements. 
(foo will be either all elements, or the filtered ones depending on state 
of displayAll). 

	



