---General info ----


------ Same Origin/Cross Origin Resource Sharing-------


By default, JS code of an app in a browser can only communicate
with a server in the same origin. Means that a front end in 
localhost 3000 can't communicate w/ a backend server in port 3001. 
^This is standard for all web apps, not just react or node.

Can get around this by $npm install cors in the backend
repository.

in the backend code: 
	const cors = require('cors')
	app.use(cors())

^This lets you use localhost:3000 for react dev server and
localhost:3001 for node/express backend. which can then both communicate
w/ the react app in the browser. 


-----------Heroku--------

Starting with Backend:

Step 1: Add a file called Procfile to backend's root
to tell Heroku how to start the application.

web: npm start

^inside Procfile 

Step 2 (if nec): rename PORT const in index.js of backend

const PORT = process.env.PORT || 3001
//Heroku configures app port based on environment variable.

Step 3(if nec): create git repository in directory and add
.gitignore with node_modules listed in it.

Step 4: $npm install -g heroku //unsure if this has to be done everytime

Step 5: $heroku create //creates empty app on Heroku, and an associated
//empty git repo, if ran in app's root directory, empty heroku git repo is
//set as remote for local repo. 

Step 6: commit code to the repository and move it to Heroku
using $git push heroku main 
^// for me, I had to use git push heroku master. not sure why

^If app doesn't work, use command $heroku logs --tail
//remember to use the proper url paths as defined in your backend code.
ex if you have a route to /info

To connect a db to heroku: $heroku config:set MONGODB_URI= <insert db uri> 

^assuming MONGODB_URI is in .env file.

I think you have to $heroku restart afterwards. 



Deploying front end: 

Before deployment, react apps are in development mode. 
When app is deployed, must create a production build (a
version of the app that is optimized for production).

step 1: if the app was made with create-react-app: 
$npm run build //in the root of frontend project. 

^this creates directory called build that contains the directory called
static. All of the JS is 'minified' (optimized for machine reading) into one
file. 


One option is to copy the build directory to the root of the backend repo
and then configure the backend to show the frontend's 
main page (build/index.html) as its main page:


Step 2 (after creating production build): 

$cp -r build ../backendURL  //from front end directory

Step 3 (after build dir is copied in backend):

make express show static content it fetches (index.html, js, etc.)
use the built-in Express middleware called static:

app.use(express.static('build'))

^whenever express gets a GET request, it first checks if build dir 
has a file corresponding to the request's address. 
^Now GET requests to serveraddress.com/index.html or 
serveraddress.com will show the react frontend. 

Step 4:

$git push heroku main (master?) 


----Relative paths---- 

If both frontend and backend have the same address (ex: localhost:3001)
the frontend can instead use a relative URL that leaves out the 
part declaring the server. 
^ex:  const baseUrl = '/api/persons' //in the serverCommunications file
instead of const baseUrl = 'http://localhost:3001/api/persons';

^if you make this change, remember to make a new production build and 
copy it to backend as in step 1 and 2. 

Optional step 5 (to automate process):

Can add some npm scripts in the package.json of the backend repo:

inside "scripts" {

"build:ui": "rm -rf build && cd <path to frontend root> && npm run build && 
	       cp -r build <path from frontend root to backend root>", 
"deploy": "git push heroku main", //for me heroku master?
"deploy:full": "npm run build:ui && git add . && git commit -m uibuild &&
	       git push && npm run deploy"
"logs:prod": "heroku logs --tail"

^then $npm run build:ui builds the front end and copies it to backend.
      $npm run deploy releases the current backend to heroku
      $npm run deploy:full combines the two (w/ necessary git commands)
      $npm run logs:prod shows heroku logs



---------Proxy--------

After changing the backend address to a relative URL (/api/persons)
the front end won't connect to the backend when the frontend is in 
development mode (with $npm start). 
^because dev mode is in lh 3000, and backend is lh 3001. 

To solve this with a create-react-app: 

inside package.json of FRONTEND repo:

"proxy": "http://localhost:3001" 

^inside the object of declarations (dependencies/scripts/etc.)

--------Debugging Node ----------

Handy debugging tools: console.log (tried and true)

VS Code Debug/run: (app shouldn't be running or port will be in use)

^may have to congifure launch.json file which can be done by:
 Add Configuration (in dropdown window) -> select "run "npm start" in a 
debug terminal" 


Chrome dev tools: if you start app with $node --inspect index.js 
you can access debugger by clicking green icon in chrome dev console. 
The 'sources' tab can set breakpoints where code execution will be paused. 


The key to debugging is being systematic. Question everything, and eliminate
possibilities 1 by 1. The worst thing to do when facing a bug is 
writing more code. 
