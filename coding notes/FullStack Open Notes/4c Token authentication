The principles of token based authentication are 
depicted in the following sequence:

1.User starts by logging in using a log in form implented with Frontend
2. React code sends the username and pw to server address /api/login
   as a POST request
3. If UN/PW are correct, server generates a token that identifies the 
   user. (digitally signed to make it impossible to falsify)
4. Backend responds with status code indicating successful and returns
   the token with the response.
5. Browser saves the token.
6. When the user does an operation requiring identification, the React
   code sends the token to the server with the request.
7. Server uses token to identify the user.


----Logging In functionality---

1. $npm install jsonwebtoken

2. Create controllers/login.js file

^The file should require jsonwebtoken, bcrypt, 'express'.Router()
and the User model. 

inside loginRouter POST request:

const { username, pw } = request.body

const user = await User.findOne({ username }) //checking if username in db
const passwordCorrect = user === null
  ? false
  : await bcrypt.compare(pw, user.passwordHash)
	//since pw is stored in db as hash, need to use bcrypt.compare
if (!(user && passwordCorrect)) {
  return response.status(401).json({
    error: 'invalid username or password'
   })
 }

const userForToken = {
  username: user.username,
  id: user._id, 
  }

const token = jwt.sign(userForToken, process.env.SECRET)
//^only parties who know the SECRET can generate a valid token.
//value for secret must be set as a string in the .env file.
response.status(200)
.send({token, username: user.username, name: user.name})

}) //end of POST request

module.exports = loginRouter

^then add loginRouter to app.js, and app.use('/api/login', loginRouter)


******Limiting creating new resource to logged in users*****



 
