single test example:

const functionBeingTested = require('../pathToFile').functionName

test('describe test', () => {
 const result = functionBeingTested(12) //could just call expect on this
 expect(result).toBe(24)
}
-----
jest expects test files to have .test. in them 
(ex: foo.test.js)
-----
group of tests wraps tests inside describe block,
ex:

describe('functionName', () => {
test(....)
}

------------------------

Common practice to define NODE_ENV as test when tests are run.
Do so in scripts object:

"start": "NODE_ENV=production node index.js",
"dev": "NODE_ENV=development nodemon index.js",
"test": "NODE_ENV=test jest --verbose --runInBand --forceExit"
//runInBand prvents tests being run in parallel
//forceExit for async tests w/ mongoose version 6 or later to get rid of warning msg
^note: defining NODE_ENV like this doesnt work in windows, to correct
this install $npm install --save-dev cross-env

^IMPORTANT: this causes web server (like heroku) error,
to fix: $npm i cross-env -P (changes to a production dependency)
--------------------------------

With NODE_ENVs in place, change MONGODB_URI variable used to connect
to DB to a conditional depending on value of NODE_ENV.
^ex: const MONGO_URI = process.env.NODE_ENV === 'test' ?
 process.env.TEST_MONGO_URI : process.env.MONGO_URI

^this lets you use seperate db for testing
----------------------------------------

$npm install supertest lets you test http requests to backend
------------------------------------------

afterAll(() => {...}) runs after all tests are run. 
----------------------------------------------------
can add a 3rd parameter to the test function: the time (in ms) the 
test has to run before failing (default is 5000ms)
-----------------------------------------------------

In order to populate a DB before each test:

Parallel Method:

beforeEach(async () => {
 await Foo.deleteMany({}) //assuming Foo is an imported Mongoose constructor
 
 const fooObjects = initialObjects.map(foo => foo.save()) 
 //initialObjects hardcoded elsewhere
 const promiseArray = fooObjects.map(foo => foo.save())
 await Promise.all(promiseArray)
})

^Promise.all transforms an array of promises into a single promise
that is fulfilled once every individual promise resolves.

^Note that the promises are run in parallel, meaning order isnt
garaunteed. if you need specific order, instead of 
mapping initialObjects, use a for/of block:

Order-guaranteed method:
beforeEach(async () => {
  await Foo.deleteMany({})
  for (let note of initialObjects){
   let fooObject = new Foo(foo)
   await fooObject.save()
   }
})

------------------------------------------------------

The toContain method (ex: expect(Foo).toContain(42)) uses ===,
so its better to use toContainEqual when comparing Object equality.
--------------------------------------------------------


